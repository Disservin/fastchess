# Script that downloads bin/gen.py from lichess-org/chess-openings, runs it to generate combined data, and updates 'openings_data.cpp' file

import os
import csv
import shutil
import subprocess
import sys
from pathlib import Path
try:
    import chess
    import chess.pgn
except ImportError:
    print("Error importing module: No module named 'chess'. Install with: 'pip3 install chess'")
    sys.exit(1)
try:
    import requests
except ImportError:
    print("Error importing module: No module named 'requests'. Install with: 'pip3 install requests'")
    sys.exit(1)
    
# === CONFIGURATION ===
REPO_BASE_URL = (
    "https://raw.githubusercontent.com/lichess-org/chess-openings/refs/heads/master"
)
GEN_SCRIPT_URL = f"{REPO_BASE_URL}/bin/gen.py"
TSV_FILES = ["a.tsv", "b.tsv", "c.tsv", "d.tsv", "e.tsv"]
SCRIPT_DIR = Path(__file__).resolve().parent
SAVE_PATH = SCRIPT_DIR / "tmp"
HEADER_PATH = SCRIPT_DIR.parent / "app" / "src" / "game" / "pgn" / "openings_data.cpp"

# === STEP 1: Create temporary directory ===
os.makedirs(SAVE_PATH, exist_ok=True)

# === STEP 2: Download gen.py script ===
print("Downloading gen.py script...")
gen_script_path = SAVE_PATH / "gen.py"

try:
    resp = requests.get(GEN_SCRIPT_URL)
    resp.raise_for_status()

    with open(gen_script_path, "w", encoding="utf-8") as f:
        f.write(resp.text)

    print(f"gen.py downloaded to {gen_script_path}")
except requests.RequestException as e:
    print(f"Error downloading gen.py: {e}")
    sys.exit(1)

# === STEP 3: Download individual TSV files ===
print("Downloading TSV files...")
for tsv_file in TSV_FILES:
    url = f"{REPO_BASE_URL}/{tsv_file}"
    tsv_path = SAVE_PATH / tsv_file

    try:
        resp = requests.get(url)
        resp.raise_for_status()

        with open(tsv_path, "w", encoding="utf-8") as f:
            f.write(resp.text)

        print(f"Downloaded {tsv_file}")
    except requests.RequestException as e:
        print(f"Error downloading {tsv_file}: {e}")
        continue

# === STEP 4: Run gen.py to generate all.tsv ===
print("Running gen.py to generate combined data...")
try:
    # Change to the tmp directory and run gen.py
    result = subprocess.run(
        [sys.executable, "gen.py"] + TSV_FILES,
        cwd=SAVE_PATH,
        capture_output=True,
        text=True,
        check=True,
    )
    print("gen.py executed successfully")
    # write output to all.tsv
    with open(SAVE_PATH / "all.tsv", "w", encoding="utf-8") as out_file:
        out_file.write(result.stdout)
except subprocess.CalledProcessError as e:
    print(f"Error running gen.py: {e}")
    if e.stderr:
        print(f"gen.py error: {e.stderr}")
    sys.exit(1)

# === STEP 5: Verify all.tsv was created ===
all_tsv_path = SAVE_PATH / "all.tsv"
if not all_tsv_path.exists():
    print("Error: all.tsv was not generated by gen.py")
    sys.exit(1)

print(f"all.tsv successfully generated at {all_tsv_path}")

# === STEP 6: Write C++ header file ===
print(f"Writing C++ header file to {HEADER_PATH}...")

with (
    open(all_tsv_path, encoding="utf-8") as f,
    open(HEADER_PATH, "w", encoding="utf-8", newline="\n") as out,
):
    reader = csv.DictReader(f, delimiter="\t")

    out.write("""
#include <string_view>
#include <unordered_map>

#include <game/pgn/openings_data.hpp>

namespace fastchess::pgn {

std::unordered_map<std::string_view, Opening> EPD_TO_OPENING = {
""")

    count = 0
    for row in reader:
        epd = row["epd"].strip().replace('"', r"\"")
        eco = row["eco"].strip().replace('"', r"\"")
        name = row["name"].strip().replace('"', r"\"")
        out.write(f'    {{"{epd}", {{"{eco}", "{name}"}}}},\n')
        count += 1

    out.write("""
};

}  // namespace fastchess::pgn
""")

print(f"{HEADER_PATH} successfully written with {count} opening records.")

# === STEP 7: Cleanup ===
if os.path.exists(SAVE_PATH):
    shutil.rmtree(SAVE_PATH)
    print("Temporary files cleaned up.")

print("Script completed successfully!")
